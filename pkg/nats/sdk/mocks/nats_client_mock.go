// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNATSClientInterface is a mock of NATSClientInterface interface.
type MockNATSClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNATSClientInterfaceMockRecorder
}

// MockNATSClientInterfaceMockRecorder is the mock recorder for MockNATSClientInterface.
type MockNATSClientInterfaceMockRecorder struct {
	mock *MockNATSClientInterface
}

// NewMockNATSClientInterface creates a new mock instance.
func NewMockNATSClientInterface(ctrl *gomock.Controller) *MockNATSClientInterface {
	mock := &MockNATSClientInterface{ctrl: ctrl}
	mock.recorder = &MockNATSClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNATSClientInterface) EXPECT() *MockNATSClientInterfaceMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockNATSClientInterface) CreateStream(streamName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", streamName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockNATSClientInterfaceMockRecorder) CreateStream(streamName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockNATSClientInterface)(nil).CreateStream), streamName)
}

// Publish mocks base method.
func (m *MockNATSClientInterface) Publish(subject string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", subject, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNATSClientInterfaceMockRecorder) Publish(subject, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNATSClientInterface)(nil).Publish), subject, data)
}
