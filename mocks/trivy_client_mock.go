// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nithu/go/src/testing/kubviz/agent/kubviz/plugins/trivy/trivy_image.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nats "github.com/nats-io/nats.go"
)

// MockJetStreamContextInterface is a mock of JetStreamContextInterface interface.
type MockJetStreamContextInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJetStreamContextInterfaceMockRecorder
}

// MockJetStreamContextInterfaceMockRecorder is the mock recorder for MockJetStreamContextInterface.
type MockJetStreamContextInterfaceMockRecorder struct {
	mock *MockJetStreamContextInterface
}

// NewMockJetStreamContextInterface creates a new mock instance.
func NewMockJetStreamContextInterface(ctrl *gomock.Controller) *MockJetStreamContextInterface {
	mock := &MockJetStreamContextInterface{ctrl: ctrl}
	mock.recorder = &MockJetStreamContextInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJetStreamContextInterface) EXPECT() *MockJetStreamContextInterfaceMockRecorder {
	return m.recorder
}

// AccountInfo mocks base method.
func (m *MockJetStreamContextInterface) AccountInfo(opts ...nats.JSOpt) (*nats.AccountInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountInfo", varargs...)
	ret0, _ := ret[0].(*nats.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfo indicates an expected call of AccountInfo.
func (mr *MockJetStreamContextInterfaceMockRecorder) AccountInfo(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfo", reflect.TypeOf((*MockJetStreamContextInterface)(nil).AccountInfo), opts...)
}

// AddConsumer mocks base method.
func (m *MockJetStreamContextInterface) AddConsumer(stream string, cfg *nats.ConsumerConfig, opts ...nats.JSOpt) (*nats.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, cfg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddConsumer", varargs...)
	ret0, _ := ret[0].(*nats.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConsumer indicates an expected call of AddConsumer.
func (mr *MockJetStreamContextInterfaceMockRecorder) AddConsumer(stream, cfg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, cfg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConsumer", reflect.TypeOf((*MockJetStreamContextInterface)(nil).AddConsumer), varargs...)
}

// AddStream mocks base method.
func (m *MockJetStreamContextInterface) AddStream(cfg *nats.StreamConfig, opts ...nats.JSOpt) (*nats.StreamInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{cfg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddStream", varargs...)
	ret0, _ := ret[0].(*nats.StreamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStream indicates an expected call of AddStream.
func (mr *MockJetStreamContextInterfaceMockRecorder) AddStream(cfg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cfg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStream", reflect.TypeOf((*MockJetStreamContextInterface)(nil).AddStream), varargs...)
}

// ChanQueueSubscribe mocks base method.
func (m *MockJetStreamContextInterface) ChanQueueSubscribe(subj, queue string, ch chan *nats.Msg, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, queue, ch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChanQueueSubscribe", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChanQueueSubscribe indicates an expected call of ChanQueueSubscribe.
func (mr *MockJetStreamContextInterfaceMockRecorder) ChanQueueSubscribe(subj, queue, ch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, queue, ch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanQueueSubscribe", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ChanQueueSubscribe), varargs...)
}

// ChanSubscribe mocks base method.
func (m *MockJetStreamContextInterface) ChanSubscribe(subj string, ch chan *nats.Msg, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, ch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChanSubscribe", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChanSubscribe indicates an expected call of ChanSubscribe.
func (mr *MockJetStreamContextInterfaceMockRecorder) ChanSubscribe(subj, ch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, ch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanSubscribe", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ChanSubscribe), varargs...)
}

// ConsumerInfo mocks base method.
func (m *MockJetStreamContextInterface) ConsumerInfo(stream, name string, opts ...nats.JSOpt) (*nats.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConsumerInfo", varargs...)
	ret0, _ := ret[0].(*nats.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumerInfo indicates an expected call of ConsumerInfo.
func (mr *MockJetStreamContextInterfaceMockRecorder) ConsumerInfo(stream, name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerInfo", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ConsumerInfo), varargs...)
}

// ConsumerNames mocks base method.
func (m *MockJetStreamContextInterface) ConsumerNames(stream string, opts ...nats.JSOpt) <-chan string {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConsumerNames", varargs...)
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// ConsumerNames indicates an expected call of ConsumerNames.
func (mr *MockJetStreamContextInterfaceMockRecorder) ConsumerNames(stream interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerNames", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ConsumerNames), varargs...)
}

// Consumers mocks base method.
func (m *MockJetStreamContextInterface) Consumers(stream string, opts ...nats.JSOpt) <-chan *nats.ConsumerInfo {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Consumers", varargs...)
	ret0, _ := ret[0].(<-chan *nats.ConsumerInfo)
	return ret0
}

// Consumers indicates an expected call of Consumers.
func (mr *MockJetStreamContextInterfaceMockRecorder) Consumers(stream interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consumers", reflect.TypeOf((*MockJetStreamContextInterface)(nil).Consumers), varargs...)
}

// ConsumersInfo mocks base method.
func (m *MockJetStreamContextInterface) ConsumersInfo(stream string, opts ...nats.JSOpt) <-chan *nats.ConsumerInfo {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConsumersInfo", varargs...)
	ret0, _ := ret[0].(<-chan *nats.ConsumerInfo)
	return ret0
}

// ConsumersInfo indicates an expected call of ConsumersInfo.
func (mr *MockJetStreamContextInterfaceMockRecorder) ConsumersInfo(stream interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumersInfo", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ConsumersInfo), varargs...)
}

// CreateKeyValue mocks base method.
func (m *MockJetStreamContextInterface) CreateKeyValue(cfg *nats.KeyValueConfig) (nats.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyValue", cfg)
	ret0, _ := ret[0].(nats.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyValue indicates an expected call of CreateKeyValue.
func (mr *MockJetStreamContextInterfaceMockRecorder) CreateKeyValue(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyValue", reflect.TypeOf((*MockJetStreamContextInterface)(nil).CreateKeyValue), cfg)
}

// CreateObjectStore mocks base method.
func (m *MockJetStreamContextInterface) CreateObjectStore(cfg *nats.ObjectStoreConfig) (nats.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObjectStore", cfg)
	ret0, _ := ret[0].(nats.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectStore indicates an expected call of CreateObjectStore.
func (mr *MockJetStreamContextInterfaceMockRecorder) CreateObjectStore(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectStore", reflect.TypeOf((*MockJetStreamContextInterface)(nil).CreateObjectStore), cfg)
}

// DeleteConsumer mocks base method.
func (m *MockJetStreamContextInterface) DeleteConsumer(stream, consumer string, opts ...nats.JSOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, consumer}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConsumer", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConsumer indicates an expected call of DeleteConsumer.
func (mr *MockJetStreamContextInterfaceMockRecorder) DeleteConsumer(stream, consumer interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, consumer}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConsumer", reflect.TypeOf((*MockJetStreamContextInterface)(nil).DeleteConsumer), varargs...)
}

// DeleteKeyValue mocks base method.
func (m *MockJetStreamContextInterface) DeleteKeyValue(bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyValue", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyValue indicates an expected call of DeleteKeyValue.
func (mr *MockJetStreamContextInterfaceMockRecorder) DeleteKeyValue(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyValue", reflect.TypeOf((*MockJetStreamContextInterface)(nil).DeleteKeyValue), bucket)
}

// DeleteMsg mocks base method.
func (m *MockJetStreamContextInterface) DeleteMsg(name string, seq uint64, opts ...nats.JSOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, seq}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMsg indicates an expected call of DeleteMsg.
func (mr *MockJetStreamContextInterfaceMockRecorder) DeleteMsg(name, seq interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, seq}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsg", reflect.TypeOf((*MockJetStreamContextInterface)(nil).DeleteMsg), varargs...)
}

// DeleteObjectStore mocks base method.
func (m *MockJetStreamContextInterface) DeleteObjectStore(bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectStore", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObjectStore indicates an expected call of DeleteObjectStore.
func (mr *MockJetStreamContextInterfaceMockRecorder) DeleteObjectStore(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectStore", reflect.TypeOf((*MockJetStreamContextInterface)(nil).DeleteObjectStore), bucket)
}

// DeleteStream mocks base method.
func (m *MockJetStreamContextInterface) DeleteStream(name string, opts ...nats.JSOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStream", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockJetStreamContextInterfaceMockRecorder) DeleteStream(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockJetStreamContextInterface)(nil).DeleteStream), varargs...)
}

// GetLastMsg mocks base method.
func (m *MockJetStreamContextInterface) GetLastMsg(name, subject string, opts ...nats.JSOpt) (*nats.RawStreamMsg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, subject}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastMsg", varargs...)
	ret0, _ := ret[0].(*nats.RawStreamMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMsg indicates an expected call of GetLastMsg.
func (mr *MockJetStreamContextInterfaceMockRecorder) GetLastMsg(name, subject interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, subject}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMsg", reflect.TypeOf((*MockJetStreamContextInterface)(nil).GetLastMsg), varargs...)
}

// GetMsg mocks base method.
func (m *MockJetStreamContextInterface) GetMsg(name string, seq uint64, opts ...nats.JSOpt) (*nats.RawStreamMsg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, seq}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMsg", varargs...)
	ret0, _ := ret[0].(*nats.RawStreamMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsg indicates an expected call of GetMsg.
func (mr *MockJetStreamContextInterfaceMockRecorder) GetMsg(name, seq interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, seq}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsg", reflect.TypeOf((*MockJetStreamContextInterface)(nil).GetMsg), varargs...)
}

// KeyValue mocks base method.
func (m *MockJetStreamContextInterface) KeyValue(bucket string) (nats.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValue", bucket)
	ret0, _ := ret[0].(nats.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyValue indicates an expected call of KeyValue.
func (mr *MockJetStreamContextInterfaceMockRecorder) KeyValue(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValue", reflect.TypeOf((*MockJetStreamContextInterface)(nil).KeyValue), bucket)
}

// KeyValueStoreNames mocks base method.
func (m *MockJetStreamContextInterface) KeyValueStoreNames() <-chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStoreNames")
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// KeyValueStoreNames indicates an expected call of KeyValueStoreNames.
func (mr *MockJetStreamContextInterfaceMockRecorder) KeyValueStoreNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStoreNames", reflect.TypeOf((*MockJetStreamContextInterface)(nil).KeyValueStoreNames))
}

// KeyValueStores mocks base method.
func (m *MockJetStreamContextInterface) KeyValueStores() <-chan nats.KeyValueStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyValueStores")
	ret0, _ := ret[0].(<-chan nats.KeyValueStatus)
	return ret0
}

// KeyValueStores indicates an expected call of KeyValueStores.
func (mr *MockJetStreamContextInterfaceMockRecorder) KeyValueStores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyValueStores", reflect.TypeOf((*MockJetStreamContextInterface)(nil).KeyValueStores))
}

// ObjectStore mocks base method.
func (m *MockJetStreamContextInterface) ObjectStore(bucket string) (nats.ObjectStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore", bucket)
	ret0, _ := ret[0].(nats.ObjectStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockJetStreamContextInterfaceMockRecorder) ObjectStore(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ObjectStore), bucket)
}

// ObjectStoreNames mocks base method.
func (m *MockJetStreamContextInterface) ObjectStoreNames(opts ...nats.ObjectOpt) <-chan string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectStoreNames", varargs...)
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// ObjectStoreNames indicates an expected call of ObjectStoreNames.
func (mr *MockJetStreamContextInterfaceMockRecorder) ObjectStoreNames(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStoreNames", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ObjectStoreNames), opts...)
}

// ObjectStores mocks base method.
func (m *MockJetStreamContextInterface) ObjectStores(opts ...nats.ObjectOpt) <-chan nats.ObjectStoreStatus {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectStores", varargs...)
	ret0, _ := ret[0].(<-chan nats.ObjectStoreStatus)
	return ret0
}

// ObjectStores indicates an expected call of ObjectStores.
func (mr *MockJetStreamContextInterfaceMockRecorder) ObjectStores(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStores", reflect.TypeOf((*MockJetStreamContextInterface)(nil).ObjectStores), opts...)
}

// Publish mocks base method.
func (m *MockJetStreamContextInterface) Publish(subj string, data []byte, opts ...nats.PubOpt) (*nats.PubAck, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*nats.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockJetStreamContextInterfaceMockRecorder) Publish(subj, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockJetStreamContextInterface)(nil).Publish), varargs...)
}

// PublishAsync mocks base method.
func (m *MockJetStreamContextInterface) PublishAsync(subj string, data []byte, opts ...nats.PubOpt) (nats.PubAckFuture, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAsync", varargs...)
	ret0, _ := ret[0].(nats.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAsync indicates an expected call of PublishAsync.
func (mr *MockJetStreamContextInterfaceMockRecorder) PublishAsync(subj, data interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsync", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PublishAsync), varargs...)
}

// PublishAsyncComplete mocks base method.
func (m *MockJetStreamContextInterface) PublishAsyncComplete() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncComplete")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// PublishAsyncComplete indicates an expected call of PublishAsyncComplete.
func (mr *MockJetStreamContextInterfaceMockRecorder) PublishAsyncComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncComplete", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PublishAsyncComplete))
}

// PublishAsyncPending mocks base method.
func (m *MockJetStreamContextInterface) PublishAsyncPending() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishAsyncPending")
	ret0, _ := ret[0].(int)
	return ret0
}

// PublishAsyncPending indicates an expected call of PublishAsyncPending.
func (mr *MockJetStreamContextInterfaceMockRecorder) PublishAsyncPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAsyncPending", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PublishAsyncPending))
}

// PublishMsg mocks base method.
func (m_2 *MockJetStreamContextInterface) PublishMsg(m *nats.Msg, opts ...nats.PubOpt) (*nats.PubAck, error) {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "PublishMsg", varargs...)
	ret0, _ := ret[0].(*nats.PubAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsg indicates an expected call of PublishMsg.
func (mr *MockJetStreamContextInterfaceMockRecorder) PublishMsg(m interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsg", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PublishMsg), varargs...)
}

// PublishMsgAsync mocks base method.
func (m_2 *MockJetStreamContextInterface) PublishMsgAsync(m *nats.Msg, opts ...nats.PubOpt) (nats.PubAckFuture, error) {
	m_2.ctrl.T.Helper()
	varargs := []interface{}{m}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "PublishMsgAsync", varargs...)
	ret0, _ := ret[0].(nats.PubAckFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMsgAsync indicates an expected call of PublishMsgAsync.
func (mr *MockJetStreamContextInterfaceMockRecorder) PublishMsgAsync(m interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{m}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMsgAsync", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PublishMsgAsync), varargs...)
}

// PullSubscribe mocks base method.
func (m *MockJetStreamContextInterface) PullSubscribe(subj, durable string, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, durable}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PullSubscribe", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullSubscribe indicates an expected call of PullSubscribe.
func (mr *MockJetStreamContextInterfaceMockRecorder) PullSubscribe(subj, durable interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, durable}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullSubscribe", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PullSubscribe), varargs...)
}

// PurgeStream mocks base method.
func (m *MockJetStreamContextInterface) PurgeStream(name string, opts ...nats.JSOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurgeStream", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeStream indicates an expected call of PurgeStream.
func (mr *MockJetStreamContextInterfaceMockRecorder) PurgeStream(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeStream", reflect.TypeOf((*MockJetStreamContextInterface)(nil).PurgeStream), varargs...)
}

// QueueSubscribe mocks base method.
func (m *MockJetStreamContextInterface) QueueSubscribe(subj, queue string, cb nats.MsgHandler, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, queue, cb}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueSubscribe", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockJetStreamContextInterfaceMockRecorder) QueueSubscribe(subj, queue, cb interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, queue, cb}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockJetStreamContextInterface)(nil).QueueSubscribe), varargs...)
}

// QueueSubscribeSync mocks base method.
func (m *MockJetStreamContextInterface) QueueSubscribeSync(subj, queue string, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, queue}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueSubscribeSync", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSubscribeSync indicates an expected call of QueueSubscribeSync.
func (mr *MockJetStreamContextInterfaceMockRecorder) QueueSubscribeSync(subj, queue interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, queue}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribeSync", reflect.TypeOf((*MockJetStreamContextInterface)(nil).QueueSubscribeSync), varargs...)
}

// SecureDeleteMsg mocks base method.
func (m *MockJetStreamContextInterface) SecureDeleteMsg(name string, seq uint64, opts ...nats.JSOpt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, seq}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SecureDeleteMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecureDeleteMsg indicates an expected call of SecureDeleteMsg.
func (mr *MockJetStreamContextInterfaceMockRecorder) SecureDeleteMsg(name, seq interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, seq}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecureDeleteMsg", reflect.TypeOf((*MockJetStreamContextInterface)(nil).SecureDeleteMsg), varargs...)
}

// StreamInfo mocks base method.
func (m *MockJetStreamContextInterface) StreamInfo(stream string, opts ...nats.JSOpt) (*nats.StreamInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamInfo", varargs...)
	ret0, _ := ret[0].(*nats.StreamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamInfo indicates an expected call of StreamInfo.
func (mr *MockJetStreamContextInterfaceMockRecorder) StreamInfo(stream interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamInfo", reflect.TypeOf((*MockJetStreamContextInterface)(nil).StreamInfo), varargs...)
}

// StreamNameBySubject mocks base method.
func (m *MockJetStreamContextInterface) StreamNameBySubject(arg0 string, arg1 ...nats.JSOpt) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamNameBySubject", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamNameBySubject indicates an expected call of StreamNameBySubject.
func (mr *MockJetStreamContextInterfaceMockRecorder) StreamNameBySubject(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNameBySubject", reflect.TypeOf((*MockJetStreamContextInterface)(nil).StreamNameBySubject), varargs...)
}

// StreamNames mocks base method.
func (m *MockJetStreamContextInterface) StreamNames(opts ...nats.JSOpt) <-chan string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamNames", varargs...)
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// StreamNames indicates an expected call of StreamNames.
func (mr *MockJetStreamContextInterfaceMockRecorder) StreamNames(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamNames", reflect.TypeOf((*MockJetStreamContextInterface)(nil).StreamNames), opts...)
}

// Streams mocks base method.
func (m *MockJetStreamContextInterface) Streams(opts ...nats.JSOpt) <-chan *nats.StreamInfo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Streams", varargs...)
	ret0, _ := ret[0].(<-chan *nats.StreamInfo)
	return ret0
}

// Streams indicates an expected call of Streams.
func (mr *MockJetStreamContextInterfaceMockRecorder) Streams(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Streams", reflect.TypeOf((*MockJetStreamContextInterface)(nil).Streams), opts...)
}

// StreamsInfo mocks base method.
func (m *MockJetStreamContextInterface) StreamsInfo(opts ...nats.JSOpt) <-chan *nats.StreamInfo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamsInfo", varargs...)
	ret0, _ := ret[0].(<-chan *nats.StreamInfo)
	return ret0
}

// StreamsInfo indicates an expected call of StreamsInfo.
func (mr *MockJetStreamContextInterfaceMockRecorder) StreamsInfo(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamsInfo", reflect.TypeOf((*MockJetStreamContextInterface)(nil).StreamsInfo), opts...)
}

// Subscribe mocks base method.
func (m *MockJetStreamContextInterface) Subscribe(subj string, cb nats.MsgHandler, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj, cb}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockJetStreamContextInterfaceMockRecorder) Subscribe(subj, cb interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj, cb}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockJetStreamContextInterface)(nil).Subscribe), varargs...)
}

// SubscribeSync mocks base method.
func (m *MockJetStreamContextInterface) SubscribeSync(subj string, opts ...nats.SubOpt) (*nats.Subscription, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeSync", varargs...)
	ret0, _ := ret[0].(*nats.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeSync indicates an expected call of SubscribeSync.
func (mr *MockJetStreamContextInterfaceMockRecorder) SubscribeSync(subj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeSync", reflect.TypeOf((*MockJetStreamContextInterface)(nil).SubscribeSync), varargs...)
}

// UpdateConsumer mocks base method.
func (m *MockJetStreamContextInterface) UpdateConsumer(stream string, cfg *nats.ConsumerConfig, opts ...nats.JSOpt) (*nats.ConsumerInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, cfg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConsumer", varargs...)
	ret0, _ := ret[0].(*nats.ConsumerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsumer indicates an expected call of UpdateConsumer.
func (mr *MockJetStreamContextInterfaceMockRecorder) UpdateConsumer(stream, cfg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, cfg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsumer", reflect.TypeOf((*MockJetStreamContextInterface)(nil).UpdateConsumer), varargs...)
}

// UpdateStream mocks base method.
func (m *MockJetStreamContextInterface) UpdateStream(cfg *nats.StreamConfig, opts ...nats.JSOpt) (*nats.StreamInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{cfg}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStream", varargs...)
	ret0, _ := ret[0].(*nats.StreamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockJetStreamContextInterfaceMockRecorder) UpdateStream(cfg interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{cfg}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockJetStreamContextInterface)(nil).UpdateStream), varargs...)
}
