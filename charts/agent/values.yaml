# Default values for agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/intelops/kubviz/kubviz-agent
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.1.8"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "agent"
  rbac:
    create: true

podAnnotations: {}

podSecurityContext:
  fsGroup: 1001
  runAsUser: 1001
  runAsGroup: 1001

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80


git_bridge:
  enabled: false
  image:
    repository: ghcr.io/intelops/kubviz/git-agent
    pullPolicy: Always
    tag: "v1.1.8"
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
      ephemeralstorage: 100Mi
    requests:
      cpu: 200m
      memory: 256Mi
      ephemeralstorage: 100Mi
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath: /mnt/agent/gb
    accessMode: ReadWriteOnce
    size: 5Gi
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod-cluster
      kubernetes.io/force-ssl-redirect: "true"
      kubernetes.io/ssl-redirect: "true"
      kubernetes.io/tls-acme: "true"
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: gitbridge.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


container_bridge:
  enabled: false
  image:
    repository: ghcr.io/intelops/kubviz/container-agent
    pullPolicy: Always
    tag: "v1.1.8"
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
      ephemeralstorage: 100Mi
    requests:
      cpu: 200m
      memory: 256Mi
      ephemeralstorage: 100Mi
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    mountPath: /mnt/agent/cb
    accessMode: ReadWriteOnce
    size: 5Gi
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod-cluster
      kubernetes.io/force-ssl-redirect: "true"
      kubernetes.io/ssl-redirect: "true"
      kubernetes.io/tls-acme: "true"
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: containerbridge.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 2
    memory: 2Gi
    ephemeralstorage: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi
    ephemeralstorage: 256Mi

persistence:
  enabled: true
  existingClaim: ""
  storageClass: ""
  mountPath: /mnt/agent/kbz
  accessMode: ReadWriteOnce
  size: 5Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

schedule:
  enabled: false
  schedulingInterval: "24h"
  outdatedInterval: "@every 18h"
  getallInterval: "@every 19h"
  kubescoreInterval: "@every 20h"
  rakkessInterval: "@every 21h"
  kubepreupgradeInterval: "@every 22h"
  trivyimageInterval: "@every 24h"
  trivysbomInterval: "@every 16h"
  trivyclusterscanInterval: "@every 17h"

kuberhealthy:
  enabled: true
  pollInterval: "60m"
  url: "http://kuberhealthy:80"
  check:
    podRestarts:
      enabled: true
      runInterval: 5m
      timeout: 10m
      image:
        registry: docker.io
        repository: kuberhealthy/pod-restarts-check
        tag: v2.5.0
      allNamespaces: true
      extraEnvs:
        MAX_FAILURES_ALLOWED: "10"
      nodeSelector: {}
      tolerations: []
      #- key: "key"
      #  operator: "Equal"
      #  value: "value"
      #  effect: "NoSchedule"
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
    podStatus:
      enabled: true
      runInterval: 5m
      timeout: 15m
      image:
        registry: docker.io
        repository: kuberhealthy/pod-status-check
        tag: v1.3.0
      allNamespaces: true
      extraEnvs: {}
      nodeSelector: {}
      tolerations: []
      #- key: "key"
      #  operator: "Equal"
      #  value: "value"
      #  effect: "NoSchedule"
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
    imagePullCheck:
      enabled: true
      runInterval: 60m
      timeout: 1m
      image:
        repository: kuberhealthy/test-check
        tag: v1.4.0
      extraEnvs:
        REPORT_FAILURE: "false"
        REPORT_DELAY: "1s"
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
    resourceQuota:
      enabled: true
      runInterval: 1h
      timeout: 2m
      image:
        repository: kuberhealthy/resource-quota-check
        tag: v1.3.0
      extraEnvs:
        BLACKLIST: "default"
        WHITELIST: "kube-system,kubviz"
      resources:
        requests:
          cpu: 15m
          memory: 15Mi
        limits:
          cpu: 30m

opentelemetry:
  isEnabled: false
  url: "otelcollector.local"
  appName: "kubviz"

clusterName: "kubviz"

externalSecrets:
  create: false

nats:
  host: kubviz-client-nats
  auth:
    # Use token if you want to provide the token via Helm Values
    token: ""
    # Use a secret reference if you want to get a token from a secret
    # secret:
    #   name: ""
    #   key: ""


mtls:
  enabled: false
  secret:
    name: 